#Использовать logos
#Использовать tempfiles
// #Использовать 1commands
#Использовать yabr
#Использовать v8unpack

Перем Лог;

Процедура ОписаниеКоманды(Команда) Экспорт
    ПутьФайла = Команда.Аргумент("PATH", "", "Путь файла 1С")
        .ТСтрока() // тип опции Строка
        .ВОкружении(ПараметрыПриложения.ИмяПриложения() + "_PATH");
        // .ПоУмолчанию(Ложь)
        // .СкрытьВСправке(); // Любой тип

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	ПутьФайла = Команда.ЗначениеАргумента("PATH");

	// ИмяМетаданного = ИмяМетаданногоИзФайлаЧерезКоманднуюСтроку(ПутьФайла);
	ИмяМетаданного = ИмяМетаданногоИзФайлаЧерезКомпоненту(ПутьФайла);
	
	Сообщить(ИмяМетаданного);
КонецПроцедуры

Функция ИмяМетаданногоИзФайлаЧерезКомпоненту(ПутьФайла)
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

	ГуидФайлаОписания = Неопределено;

	ЧтениеФайла = Новый ЧтениеФайла8(ПутьФайла);
	КорневойЭлемент = ЧтениеФайла.Элементы.Найти("root");
	Если Не ЗначениеЗаполнено(КорневойЭлемент) Тогда
		Лог.Ошибка("Не удалось найти root в контейнере %1", ПутьФайла);
		Возврат "";	
	КонецЕсли;
	ЧтениеФайла.Извлечь(КорневойЭлемент, ВременныйКаталог, Истина);
				
	ГуидФайлаОписания = ГуидФайлаОписания(ВременныйКаталог, "root");
	Лог.Отладка(ГуидФайлаОписания);

	ЭлементОписания = ЧтениеФайла.Элементы.Найти(ГуидФайлаОписания);
	Если Не ЗначениеЗаполнено(ЭлементОписания) Тогда
		Лог.Ошибка("Не удалось найти элемент %2 в контейнере %1", ПутьФайла, ЭлементОписания);
		Возврат "";	
	КонецЕсли;

	ЧтениеФайла.Извлечь(ЭлементОписания, ВременныйКаталог, Истина);

	ИмяМетаданного = ИмяМетаданногоИзФайлаОписания(ВременныйКаталог, ГуидФайлаОписания);
	Возврат ИмяМетаданного;

КонецФункции

// Функция ИмяМетаданногоИзФайлаЧерезКоманднуюСтроку(ПутьФайла)
// 	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

// 	СтрокаЗапуска = СтрШаблон("%1 -p ""%2"" %3", ПутьРаспаковщика(), ПутьФайла, ВременныйКаталог);
// 	ИсполнитьКоманду(СтрокаЗапуска);

// 	ИсполнитьКоманду("cmd /c dir " + ВременныйКаталог);

// 	ГуидФайлаОписания = ГуидФайлаОписания(ВременныйКаталог, "root");
// 	Лог.Отладка(ГуидФайлаОписания);

// 	ИмяМетаданного = ИмяМетаданногоИзФайлаОписания(ВременныйКаталог, ГуидФайлаОписания);
// 	Возврат ИмяМетаданного;
// КонецФункции

Функция ГуидФайлаОписания(ВременныйКаталог, ИмяКорневогоФайла)

	Файл = ОбъединитьПути(ВременныйКаталог, ИмяКорневогоФайла);

	Менеджер = Новый МенеджерОбработкиДанных();
	Менеджер.Лог().УстановитьУровень(УровниЛога.Предупреждение);
	Чтение = Новый ЧтениеСкобкофайла(Менеджер);
	Чтение.УстановитьПараметрыОбработкиДанных(Новый Структура);
	// Чтение.УстановитьПараметрыОбработкиДанных(Новый Структура("УровниЗаписей", "0,1"));
	Чтение.УстановитьДанные(Файл);
	Чтение.ОбработатьДанные();
	
	Структура = Чтение.РезультатОбработки();
	Результат = Структура.Значения[0].Значения[1];
	Возврат Результат;
КонецФункции

Функция ИмяМетаданногоИзФайлаОписания(ВременныйКаталог, ГуидФайлаОписания)
	Файл = ОбъединитьПути(ВременныйКаталог, ГуидФайлаОписания);

	Менеджер = Новый МенеджерОбработкиДанных();
	Менеджер.Лог().УстановитьУровень(УровниЛога.Предупреждение);
	Чтение = Новый ЧтениеСкобкофайла(Менеджер);
	НастройкаЧтения = Новый Структура("НачальнаяСтрока,КонечнаяСтрока", 8, 8);
	Чтение.УстановитьПараметрыОбработкиДанных(НастройкаЧтения);
	Чтение.УстановитьДанные(Файл);
	Чтение.ОбработатьДанные();
	
	Структура = Чтение.РезультатОбработки();
	
	Результат = Структура.Значения[0].Значения[3].Значения[1].Значения[1].Значения[3].Значения[1].Значения[2];
	
	Результат = СтрЗаменить(Результат, """", "");
	Возврат Результат;
КонецФункции

// Функция ИсполнитьКоманду(Знач СтрокаВыполнения, Знач КодировкаВывода = "") Экспорт

// 	Команда = Новый Команда;
// 	Команда.ПоказыватьВыводНемедленно(Ложь);
// 	Если Не ПустаяСтрока(КодировкаВывода) Тогда
// 		Команда.УстановитьКодировкуВывода(КодировкаВывода);
// 	КонецЕсли;

// 	Команда.УстановитьПравильныйКодВозврата(0);

// 	Лог.Отладка(СтрокаВыполнения);
// 	Команда.УстановитьСтрокуЗапуска(СтрокаВыполнения);
// 	Команда.Исполнить();

// 	Возврат Команда.ПолучитьВывод();

// КонецФункции

Функция ПолучитьЛог() Экспорт
	Если Лог = Неопределено Тогда
		Лог = ПараметрыПриложения.Лог();
		// Лог = Логирование.ПолучитьЛог(ИмяЛога());
		// Лог.УстановитьРаскладку(ЭтотОбъект);
	КонецЕсли;
	Возврат Лог;
КонецФункции

// Функция КаталогПроекта() Экспорт
// 	ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
// 	Возврат ОбъединитьПути(ФайлИсточника.Путь, "..", "..");
// КонецФункции

// Функция ИмяЛога() Экспорт
// 	Возврат "oscript.app.add";
// КонецФункции

// Функция ПутьРаспаковщика()
// 	Возврат "v8unpack";
// КонецФункции

Лог = ПолучитьЛог();
