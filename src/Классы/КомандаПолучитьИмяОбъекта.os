#Использовать logos
#Использовать tempfiles
#Использовать yabr
#Использовать v8unpack
#Использовать fs

Перем Лог; // объект лога

Процедура ОписаниеКоманды(Команда) Экспорт
    Команда.Аргумент("PATH", "", "Путь файла 1С")
        .ТСтрока() // тип опции Строка
        .ВОкружении(ПараметрыПриложения.ИмяПриложения() + "_PATH");

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	ПутьФайла = Команда.ЗначениеАргумента("PATH");
	ПутьФайла = ФС.ОбъединитьПути(ТекущийКаталог(), ПутьФайла);

	// TODO проверить размер файла, на нулевые файлы исключение
	ИмяМетаданного = ИмяМетаданногоИзФайлаЧерезКомпоненту(ПутьФайла);

	Сообщить(ИмяМетаданного);
КонецПроцедуры

Функция ИмяМетаданногоИзФайлаЧерезКомпоненту(ПутьФайла)

	Лог.Отладка("ПутьФайла %1", ПутьФайла);

	Попытка
		ЧтениеФайла8 = Новый ЧтениеФайла8(ПутьФайла);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Сообщить(ИнформацияОбОшибке.ПодробноеОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;

	Для Каждого Элемент Из ЧтениеФайла8.Элементы Цикл
		Лог.Отладка("Элемент %1", Элемент.Имя);
	КонецЦикла;

	КорневойЭлемент = ЧтениеФайла8.Элементы.Найти(ИмяКорняВнешнегоОтчетаОбработки());
	Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
		Лог.Отладка("Нашли корень внешнего отчета или обработки - %1", КорневойЭлемент.Имя);
	Иначе
		КорневойЭлемент = ЧтениеФайла8.Элементы.Найти(ИмяКорняКонфигурацииРасширения());
		Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
			Лог.Отладка("Нашли корень конфигурации или расширения - %1", КорневойЭлемент.Имя);
		Иначе
			Лог.Ошибка("Не удалось найти ни %2, ни %3 в контейнере %1", 
				ПутьФайла, ИмяКорняВнешнегоОтчетаОбработки(), ИмяКорняКонфигурацииРасширения());
			Возврат "";
		КонецЕсли;

	КонецЕсли;

	Возврат ИмяМетаданногоПоКорневомуЭлементу(ЧтениеФайла8, КорневойЭлемент, ПутьФайла);

КонецФункции

Функция ИмяМетаданногоПоКорневомуЭлементу(Знач ЧтениеФайла8, Знач КорневойЭлемент, Знач ПутьФайла)
	ИмяКорневогоФайла = КорневойЭлемент.Имя;
	
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

	ЧтениеФайла8.Извлечь(КорневойЭлемент, ВременныйКаталог, Истина);

	ДанныеКорня = ПрочитатьСкобкоФайл(ВременныйКаталог, ИмяКорневогоФайла, Новый Структура);

	ГуидФайлаОписания = ГуидФайлаОписания(ДанныеКорня, ИмяКорневогоФайла);
	Лог.Отладка("ГуидФайлаОписания %1", ГуидФайлаОписания);

	ЭлементОписания = ЧтениеФайла8.Элементы.Найти(ГуидФайлаОписания);
	Если Не ЗначениеЗаполнено(ЭлементОписания) Тогда
		Лог.Ошибка("Не удалось найти элемент %2 в контейнере %1", ПутьФайла, ГуидФайлаОписания);
		Возврат "";
	КонецЕсли;

	ЧтениеФайла8.Извлечь(ЭлементОписания, ВременныйКаталог, Истина);

	НастройкаЧтенияМетаданного = Новый Структура("НачальнаяСтрока,КонечнаяСтрока", 8, 8);
	ДанныеМетаданного = ПрочитатьСкобкоФайл(ВременныйКаталог, ЭлементОписания.Имя, НастройкаЧтенияМетаданного);

	Возврат ИмяМетаданного(ДанныеМетаданного, ИмяКорневогоФайла);
	
КонецФункции

Функция ГуидФайлаОписания(Знач Данные, Знач ИмяКорневогоФайла)
	
	Если ИмяКорневогоФайла = ИмяКорняВнешнегоОтчетаОбработки() Тогда
		Возврат Данные.Значения[0].Значения[1];
	ИначеЕсли ИмяКорневогоФайла = ИмяКорняКонфигурацииРасширения() Тогда
		Возврат Данные.Значения[1].Значения[1];
	Иначе
		ВызватьИсключение "Неизвестное имя корня " + ИмяКорневогоФайла;
	КонецЕсли;

КонецФункции

Функция ИмяМетаданного(Знач Данные, Знач ИмяКорневогоФайла)

	Если ИмяКорневогоФайла = ИмяКорняВнешнегоОтчетаОбработки() Тогда
		Результат = Данные.Значения[0].Значения[3].Значения[1].Значения[1].Значения[3].Значения[1].Значения[2];
	ИначеЕсли ИмяКорневогоФайла = ИмяКорняКонфигурацииРасширения() Тогда
		Результат = Данные.Значения[0].Значения[3].Значения[1].Значения[1].Значения[1].Значения[1].Значения[2];
	Иначе
		ВызватьИсключение "Неизвестное имя корня " + ИмяКорневогоФайла;
	КонецЕсли;

	Результат = СтрЗаменить(Результат, """", "");
	Возврат Результат;
КонецФункции

Функция ПрочитатьСкобкоФайл(Знач ВременныйКаталог, Знач ИмяФайла, Знач НастройкиЧтения)

	ПутьФайла = ФС.ОбъединитьПути(ВременныйКаталог, ИмяФайла);
	Лог.Отладка("ПутьФайла %1", ПутьФайла);
	Файл = Новый Файл(ПутьФайла);
	Лог.Отладка("существует %1 - файл %2", Файл.Существует(), Файл.ПолноеИмя);

	УровеньЛогаДо = Лог.Уровень();

	Менеджер = Новый МенеджерОбработкиДанных();
	Менеджер.Лог().УстановитьУровень(УровниЛога.Предупреждение);
	Чтение = Новый ЧтениеСкобкофайла(Менеджер);
	Чтение.УстановитьПараметрыОбработкиДанных(НастройкиЧтения);
	Чтение.УстановитьДанные(ПутьФайла);
	Чтение.ОбработатьДанные();
	
	Результат = Чтение.РезультатОбработки();

	Лог.УстановитьУровень(УровеньЛогаДо);

	Возврат Результат;
КонецФункции

Функция ИмяКорняВнешнегоОтчетаОбработки()
	Возврат "root";
КонецФункции

Функция ИмяКорняКонфигурацииРасширения()
	Возврат "configinfo";
КонецФункции

Функция ПолучитьЛог() Экспорт
	Если Лог = Неопределено Тогда
		Лог = ПараметрыПриложения.Лог();
	КонецЕсли;
	Возврат Лог;
КонецФункции

Лог = ПолучитьЛог();
